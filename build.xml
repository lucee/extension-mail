<?xml version="1.0" encoding="UTF-8"?>
<project default="clean" basedir="." name="mail-extension">
    <description>
        Build Mail Extension
    </description>
    <!-- set global properties for this build -->
  
    <property name="lib" location="source/java/libs"/>
    <property name="src" location="source/java/src"/>
    <property name="srcImg" location="source/images"/>
      <property name="srcFld" location="source/fld"/>
      <property name="srcTld" location="source/tld"/>
    <property name="temp" location="temp"/>
    <property name="build" location="build"/>
    <property name="dist"  location="target"/>
    <path id="classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar" />
        </fileset>
    </path>



  
    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        
        <delete dir="${temp}"/>
        <delete dir="${dist}"/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${temp}"/>
        <mkdir dir="${build}"/>
        <mkdir dir="${dist}/"/>
    </target>

    <target name="maven-build">     

        <condition property="is.deploy" value="true" else="false">
            <equals arg1="${maven.goal}" arg2="deploy"/>
        </condition>

        <!-- Check if artifact already exists in Maven Central -->
        <condition property="artifact.exists">
            <and>
                <equals arg1="${is.deploy}" arg2="true"/>
                <http url="https://repo1.maven.org/maven2/${mvnGroupPath}/${mvnArtifactId}/${bundleversion}/${mvnArtifactId}-${bundleversion}.pom"/>
            </and>
        </condition>

        <!-- Set effective goal based on whether artifact exists -->
        <condition property="effective.goal" value="install" else="${maven.goal}">
            <equals arg1="${artifact.exists}" arg2="true"/>
        </condition>


        <echo>goal:${maven.goal}</echo>
        <echo>effective.goal:${effective.goal}</echo>
        <echo>performRelease:${is.deploy}</echo>
        <echo>groupId:${mvnGroupId}</echo>
        <echo>groupPath:${mvnGroupPath}</echo>
        <echo>artifactId:${mvnArtifactId}</echo>
        <echo>bundleversion:${bundleversion}</echo>

         <exec dir="source/java" executable="mvn" failonerror="true">
            <arg value="clean"/>
            <arg value="${effective.goal}"/>
            <arg value="-Drevision=${bundleversion}"/>
            <arg value="-DperformRelease=${is.deploy}"/>
            <!-- <arg value="-X"/>  Debug output -->
            <arg value="-e"/>  <!-- Error details -->
            <arg value="--settings"/>
            <arg value="maven-settings.xml"/>
            <!-- Add credentials as system properties -->
            <arg value="-Dmaven.username=${maven.username}"/>
            <arg value="-Dmaven.password=${maven.password}"/>
            <arg value="-Dgpg.passphrase=${gpg.passphrase}"/>
        </exec>
        
            <echo message="Maven output: ${maven.output}"/>
            <echo message="Maven error: ${maven.error}"/>

        <!-- Now copy dependencies -->
        <exec dir="source/java" executable="mvn" failonerror="true">
            <arg value="-DoutputDirectory=${temp}/dependency"/>
            <arg value="-Dmdep.copyPom=true"/>
            <arg value="-Dmdep.useRepositoryLayout=true"/>
            <arg value="-DexcludeScope=provided"/>
            <arg value="-Drevision=${bundleversion}"/>
            <arg value="dependency:copy-dependencies"/>
        </exec>


    </target>
    

  <target name="copy-dependencies" depends="maven-build">
    <!-- Create maven directory in extension folder -->
    <mkdir dir="${dist}/extension/maven"/>
    
    <!-- Copy the Maven-built JAR -->
    <copy todir="${dist}/extension/maven">
        <fileset dir="source/java/target">
            <include name="*.jar"/>
            <include name="*.pom"/>
            <exclude name="*-sources.jar"/>
            <exclude name="*-javadoc.jar"/>
        </fileset>
    </copy>

    <!-- Copy POM from source location -->
    <copy file="source/java/pom.xml" tofile="${dist}/extension/maven/${mvnArtifactId}-${bundleversion}.pom"/>
    
    <!-- Ensure the target directory exists -->
    <mkdir dir="${dist}/extension/maven/org/lucee/${mvnArtifactId}/${bundleversion}/" />
    
    <!-- Move the files -->
    <move file="${dist}/extension/maven/${mvnArtifactId}-${bundleversion}.jar" 
          tofile="${dist}/extension/maven/org/lucee/${mvnArtifactId}/${bundleversion}/${mvnArtifactId}-${bundleversion}.jar" />
    <move file="${dist}/extension/maven/${mvnArtifactId}-${bundleversion}.pom" 
          tofile="${dist}/extension/maven/org/lucee/${mvnArtifactId}/${bundleversion}/${mvnArtifactId}-${bundleversion}.pom" />
    





    <!-- Copy all dependencies -->
    <copy todir="${dist}/extension/maven">
        <fileset dir="${temp}/dependency">
            <include name="**/*.jar"/>
            <include name="**/*.pom"/>
        </fileset>
    </copy>
</target>





    <target name="createManifest" depends="copy-dependencies" description="create MANIFEST.MF file" >
        <tstamp>
            <format property="NOW" pattern="yyyy-MM-dd HH:mm:ss" />
        </tstamp>
        <echo file="${dist}/extension/META-INF/MANIFEST.MF">Manifest-Version: 1.0
Built-Date: ${NOW}
version: "${bundleversion}"
id: "${id}"
name: "${label}"
description: "${description}"
lucee-core-version: "${luceeCoreVersion}"
release-type: ${releaseType}
start-bundles: false
</echo>
    </target>
  
    <!-- Updated dist target to depend on maven-build -->
    <target name="dist" depends="createManifest"
            description="generate the distribution" >
        
        <!-- Put everything in ${build} into .jar file
        <jar jarfile="${dist}/extension/jars/${mvnArtifactId}-${bundleversion}.jar" 
             basedir="${build}"  
             manifest="${src}/META-INF/MANIFEST.MF">
            <manifest>
                <attribute name="Bundle-Version" value="${bundleversion}"/>
                <attribute name="Built-Date" value="${NOW}"/>
                <attribute name="Bundle-SymbolicName" value="${bundlename}"/>
            </manifest>
        </jar> -->

        <!-- copy the logo -->
        <copy todir="${dist}/extension/META-INF">
            <fileset dir="${srcImg}/">
                <include name="logo.png"/>
            </fileset>
        </copy>


        <!-- copy the tlds necessary -->
        <copy file="${srcTld}/tag.tldx" tofile="${dist}/extension/tlds/mail-tags.tldx" />
        <replaceregexp 
          file="${dist}/extension/tlds/mail-tags.tldx" 
          match="\{mvnGroupId\}" 
          replace="${mvnGroupId}" 
          byline="true"/>
        <replaceregexp 
          file="${dist}/extension/tlds/mail-tags.tldx" 
          match="\{mvnArtifactId\}" 
          replace="${mvnArtifactId}" 
          byline="true"/>
        <replaceregexp 
          file="${dist}/extension/tlds/mail-tags.tldx" 
          match="\{mvnVersion\}" 
          replace="${mvnVersion}" 
          byline="true"/>

        <!-- Zip everything -->
        <zip destfile="${dist}/${filename}-${bundleversion}.lex">
            <zipfileset dir="${dist}/extension"/>
        </zip>
    </target>

    <target name="clean" depends="dist" description="clean up" >
        <!-- Delete the ${build} and ${temp} directory trees 
        <delete dir="${build}"/>
        <delete dir="${temp}"/> -->
    </target>
</project>